#coding:utf-8
# import the necessary packages
from imutils import face_utils
import numpy as np
import argparse
import imutils

import load
import dlib
from align import AlignDlib
import cv2
import os
alignment = AlignDlib('shape_predictor_68_face_landmarks.dat')
def load_image(path):
    img = cv2.imread(path, 1)
    # OpenCV loads images with color channels
    # in BGR order. So we need to reverse them
    return img[...,::-1]
def align_image(img):
    return alignment.align(96, img, alignment.getLargestFaceBoundingBox(img),
                           landmarkIndices=AlignDlib.OUTER_EYES_AND_NOSE)
def crop_train(path,result_folder):
    metadata = load.load_metadata_train(path)
    for i, m in enumerate(metadata):
        img_path = m.image_path()
        img = load_image(img_path)
        #print(alignment.getAllFaceBoundingBoxes(img))
        rect = alignment.getAllFaceBoundingBoxes(img)
        #print(rect)
        if rect:
            img = align_image(img)
        else:
            img = cv2.resize(img, (250, 250), interpolation=cv2.INTER_CUBIC)
            img = img[77:173, 77:173]
        impt = img_path.split("/mnt/datasets/WebFace/first_round/first_round_train/")[1]
        label = impt.split("/")[0]
        dest_file_path = os.path.join(result_folder,impt)
        label_path = os.path.join(result_folder,label)
        if not os.path.exists(label_path):
            os.mkdir(label_path)
        cv2.imwrite(dest_file_path, img)
        # print(dest_file_path)
        # cv2.imshow("Output", img)
        # cv2.waitKey(0)
        # scale RGB values to interval [0,1]
        img = (img / 255.).astype(np.float32)
        # obtain embedding vector for image
        #embedded[i] = nn4_small2_pretrained.predict(np.expand_dims(img, axis=0))[0]
        # show the output image with the face detections + facial landmarks
        # cv2.imshow("Output", img)
        # cv2.waitKey(0)

if __name__ == '__main__':
    aligned_db_folder = "/mnt/datasets/WebFace/first_round/first_round_train/"
    result_folder = "/home/kesci/input/align/train/crop_images_DB"
    crop(aligned_db_folder,result_folder)
